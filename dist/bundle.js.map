{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","javascripts/app.js","javascripts/classes.js","javascripts/enemies.js","javascripts/main.js","javascripts/player.js","javascripts/spells.js","javascripts/weapons.js"],"names":[],"mappingszrnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\r\n  Test code to generate a human player and an orc player\r\n */\r\nvar PlayerOne = new Gauntlet.Combatants.Human();\r\n\r\nPlayerOne.setWeapon(new Gauntlet.WeaponRack.Dagger());\r\n\r\n\r\nvar PlayerTwo = new Gauntlet.Combatants.Orc();\r\nPlayerTwo.generateClass();\r\nPlayerTwo.setWeapon(new Gauntlet.WeaponRack.BroadSword());\r\n\r\n\r\n\r\n\r\n/*\r\n  Test code to generate a spell\r\n */\r\nvar spell = new Gauntlet.SpellBook.Sphere();\r\n\r\n$(\".className\").click(function(e) {\r\n       if (e.target.closest('div').classList.contains(\"className\")) {\r\n     // if (e.target.parentNode.classList.contains(\"className\") || e.target.closest('className')) {\r\n       PlayerOne.class = this.querySelector('.btn__text').innerHTML;\r\n       console.log(this.querySelector('.btn__text').innerHTML);\r\n     }\r\n   })\r\n\r\n\r\n$('#weapon-select').click(function(e) {\r\n  if(e.target.parentNode.classList.contains(\"hands\")) {\r\n    PlayerOne.setWeapon(new Gauntlet.WeaponRack.Weapon());\r\n    console.log(PlayerOne);\r\n  } else if (e.target.parentNode.classList.contains(\"dagger\")){\r\n    PlayerOne.setWeapon(new Gauntlet.WeaponRack.Dagger());\r\n    console.log(PlayerOne);\r\n\r\n  } else if (e.target.parentNode.classList.contains(\"sword\")){\r\n    PlayerOne.setWeapon(new Gauntlet.WeaponRack.BroadSword());\r\n\r\n    console.log(PlayerOne);\r\n  } else if (e.target.parentNode.classList.contains(\"axe\")){\r\n    PlayerOne.setWeapon(new Gauntlet.WeaponRack.WarAxe());\r\n    console.log(PlayerOne);\r\n  }\r\n  $(\"#readyToRumble\").show();\r\n})\r\n\r\n// This is where the function to generate a random class for PlayerOne is called upoon clciking on the \"Suprise me\" button on the page where you select a class.\r\n  $('.random').click(function() {\r\n    PlayerOne.generateClass();  // This will be used for \"Surprise me\" option\r\n    console.log(\"PlayerOne\", PlayerOne);\r\n});\r\n\r\n// This is where the function to generate a random weapon for PlayerOne is called upoon clciking on the \"Suprise me\" button on the page where you select a weapon.\r\n  $('.other').click(function() {\r\n    PlayerOne.generateWeapon();  // This will be used for \"Surprise me\" option\r\n    console.log(\"PlayerOne\", PlayerOne);\r\n});\r\n\r\n  \r\n  // // Event listener on Attack Button\r\n  // $('#attackButton').click(function(){\r\n\r\n  //   checkHealth();\r\n  // });\r\n\r\n\r\n\r\n// Function to check p1 and p2 current health\r\nfunction checkHealth(){\r\n  // Checking to see if P1 is dead\r\n  pTwoAttack();\r\n  if (PlayerOne.health <= 0) {\r\n  loseGame();\r\n\r\n\r\n  }\r\n  // Checking to see if P2 is dead\r\n  else if (PlayerTwo.health <= 0){\r\n  winGame();\r\n  }\r\n  else {\r\n  console.log(\"p1\", PlayerOne );\r\n  console.log(\"p2\", PlayerTwo );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n// Use if else statement to either call winGame, loseGame function, or calculate damage\r\nfunction pTwoAttack(){\r\n  p1RemHealth = PlayerOne.health -= PlayerTwo.weapon.damage;\r\n  pOneAttack(p1RemHealth);\r\n}\r\n\r\nfunction pOneAttack(p1RemHealth){\r\n  p2RemHealth = PlayerTwo.health -= PlayerOne.weapon.damage;\r\n\r\n  atkStrings(p1RemHealth, p2RemHealth);\r\n}\r\n\r\nfunction atkStrings(p1RemHealth, p2RemHealth){\r\n  p2AtkString = `${PlayerTwo.name} attacks with ${PlayerTwo.weapon} for ${PlayerTwo.weapon.damage} damage! and Health is ${p2RemHealth}`\r\n  p1AtkString = `${PlayerOne.name} attacks with ${PlayerOne.weapon} for ${PlayerOne.weapon.damage} damage! and Health is ${p1RemHealth}`\r\n  atkDisplay(p2AtkString, p1AtkString);\r\n}\r\n\r\nfunction atkDisplay(p2AtkString, p1AtkString){\r\n  p1Div = $(\"#playerOne\");\r\n  p2Div = $(\"#playerTwo\");\r\n  p1Div.html(p1AtkString);\r\n  p2Div.html(p2AtkString);\r\n}\r\n\r\n\r\nloseGame = function(){\r\n  $(\".attackButton\").hide();\r\n  p2AtkLoseString = `${PlayerTwo.name} has Defeated ${PlayerOne.name}`;\r\n  p1AtkLoseString = `${\"\"}`;\r\n  atkDisplay(p2AtkLoseString, p1AtkLoseString);\r\n  //alert(`${PlayerTwo.playerName} Wins the Game\"`);\r\n}\r\n\r\n\r\n$(document).ready(function() {\r\n\r\nwinGame = function (){\r\n $(\".attackButton\").hide();\r\n p2AtkWinString = `${\"\"}`;\r\n p1AtkWinString = `${PlayerOne.name} has Defeated ${PlayerTwo.playerName}`;\r\n atkDisplay(p2AtkWinString, p1AtkWinString);\r\n //alert(`${PlayerOne.name} Wins the Game`);\r\n}\r\n\r\n  // Grab value from input for Player Name on click of anchor element \"Select Class\"\r\n\r\n  $('#setName').click(function(){\r\n    PlayerOne.name = $('#player-name').val();\r\n  });\r\n\r\n  $(\"#class-select\").click(function(e) {\r\n    if (e.target.parentNode.classList.contains(\"className\")) {\r\n      PlayerOne.class = e.target.innerHTML;\r\n\r\n    }\r\n  })\r\n\r\n\r\n  /*\r\n    Show the initial view that accepts player name\r\n    but hides the enter battleground button and battlefield\r\n   */\r\n  $(\"#player-setup\").show();\r\n  $(\"#readyToRumble\").hide();\r\n  $(\"#battleground\").hide();\r\n\r\n  /*\r\n    When any button with card__link class is clicked,\r\n    move on to the next view.\r\n   */\r\n  $(\".card__link\").click(function(e) {\r\n    var nextCard = $(this).attr(\"next\");\r\n    console.log(\"next\", nextCard );\r\n    var moveAlong = false;\r\n\r\n    switch (nextCard) {\r\n      case \"card--class\":\r\n        moveAlong = ($(\"#player-name\").val() !== \"\");\r\n        console.log(\"cardClass\", moveAlong );\r\n        break;\r\n      case \"card--weapon\":\r\n        moveAlong = ($(\"#player-name\").val() !== \"\");\r\n        console.log(\"cardWeapon\", moveAlong );\r\n        break;\r\n      case \"card--battleground\":\r\n        moveAlong = ($(\"#player-name\").val() !== \"\");\r\n        break;\r\n    }\r\n\r\n    if (moveAlong) {\r\n      $(\".card\").hide();\r\n      $(\".\" + nextCard).show();\r\n    }\r\n  });\r\n\r\n  /*\r\n    When the back button clicked, move back a view\r\n   */\r\n  $(\".card__back\").click(function(e) {\r\n    var previousCard = $(this).attr(\"previous\");\r\n    $(\".card\").hide();\r\n    $(\".\" + previousCard).show();\r\n  });\r\n\r\n});\r\n\r\n\r\n  $(\"#readyToRumble\").click(function() {\r\n    $(\"#readyToRumble\").hide();\r\n    $(\"#weapon-select\").hide();\r\n    $(\"#battleground\").show();\r\n  });\r\n\r\n  $(\"#attackButton\").click(function() {\r\n    checkHealth();\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","/*\r\n  TODO: Modularize this code with IIFE or Browserify\r\n */\r\n var Gauntlet = (function(originalGauntlet) {\r\n// var originalGauntlet = originalGauntlet || {};\r\noriginalGauntlet.GuildHall = {};\r\n\r\n/*\r\n  Base function for a player, or enemy, class (profession)\r\n */\r\noriginalGauntlet.GuildHall.PlayerClass = function() {\r\n  this.name = \"Beggar\";\r\n  this.healthBonus = 0;\r\n  this.strengthBonus = 0;\r\n  this.intelligenceBonus = 0;\r\n  this.magical = false;\r\n\r\n  this.toString = function() {\r\n    return this.name;\r\n  }\r\n};\r\n\r\n/*\r\n    FIGHTER CLASSES\r\n      - Warrior\r\n      - Valkyrie\r\n      - Berserker\r\n      - Monk\r\n */\r\noriginalGauntlet.GuildHall.Fighter = function() {\r\n  this.healthBonus = 20;\r\n  this.strengthBonus = 10;\r\n};\r\noriginalGauntlet.GuildHall.Fighter.prototype = new originalGauntlet.GuildHall.PlayerClass();\r\n\r\n\r\noriginalGauntlet.GuildHall.Warrior = function() {\r\n  this.name = \"Warrior\";\r\n  this.healthBonus = this.healthBonus + 25;\r\n  this.strengthBonus = this.strengthBonus + 30;\r\n};\r\noriginalGauntlet.GuildHall.Warrior.prototype = new originalGauntlet.GuildHall.Fighter();\r\n\r\n\r\noriginalGauntlet.GuildHall.Valkyrie = function() {\r\n  this.name = \"Valkyrie\";\r\n  this.healthBonus = this.healthBonus + 20;\r\n  this.strengthBonus = this.strengthBonus + 10;\r\n};\r\noriginalGauntlet.GuildHall.Valkyrie.prototype = new originalGauntlet.GuildHall.Fighter();\r\n\r\n\r\noriginalGauntlet.GuildHall.Berserker = function() {\r\n  this.name = \"Berserker\";\r\n  this.healthBonus = this.healthBonus + 35;\r\n  this.strengthBonus = this.strengthBonus + 20;\r\n};\r\noriginalGauntlet.GuildHall.Berserker.prototype = new originalGauntlet.GuildHall.Fighter();\r\n\r\n\r\noriginalGauntlet.GuildHall.Monk = function() {\r\n  this.name = \"Monk\";\r\n  this.healthBonus = this.healthBonus + 10;\r\n  this.strengthBonus = this.strengthBonus + 40;\r\n};\r\noriginalGauntlet.GuildHall.Monk.prototype = new originalGauntlet.GuildHall.Fighter();\r\n\r\n\r\n/*\r\n    MAGICAL CLASSES\r\n      - Shaman\r\n      - Wizard\r\n      - Conujurer\r\n      - Sorcerer\r\n */\r\noriginalGauntlet.GuildHall.Mage = function() {\r\n  this.name = \"Mage\";\r\n  this.magical = true;\r\n  this.healthBonus = this.healthBonus - 10;\r\n  this.strengthBonus = this.strengthBonus - 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 20;\r\n};\r\noriginalGauntlet.GuildHall.Mage.prototype = new originalGauntlet.GuildHall.PlayerClass();\r\n\r\n\r\noriginalGauntlet.GuildHall.Shaman = function() {\r\n  this.name = \"Shaman\";\r\n  this.healthBonus = this.healthBonus + 5;\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 20;\r\n};\r\noriginalGauntlet.GuildHall.Shaman.prototype = new originalGauntlet.GuildHall.Mage();\r\n\r\n\r\noriginalGauntlet.GuildHall.Wizard = function() {\r\n  this.name = \"Wizard\";\r\n  this.healthBonus = this.healthBonus - 15;\r\n  this.strengthBonus = this.strengthBonus - 25;\r\n  this.intelligenceBonus = this.intelligenceBonus + 40;\r\n};\r\noriginalGauntlet.GuildHall.Wizard.prototype = new originalGauntlet.GuildHall.Mage();\r\n\r\n\r\noriginalGauntlet.GuildHall.Conjurer = function() {\r\n  this.name = \"Conjurer\";\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\noriginalGauntlet.GuildHall.Conjurer.prototype = new originalGauntlet.GuildHall.Mage();\r\n\r\n\r\noriginalGauntlet.GuildHall.Sorcerer = function() {\r\n  this.name = \"Sorcerer\";\r\n  this.healthBonus = this.healthBonus - 5;\r\n  this.strengthBonus = this.strengthBonus - 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 30;\r\n};\r\noriginalGauntlet.GuildHall.Sorcerer.prototype = new originalGauntlet.GuildHall.Mage();\r\n\r\n\r\n/*\r\n    STEALTH CLASSES\r\n      - Thief\r\n      - Ninja\r\n      - Assassin\r\n */\r\n\r\noriginalGauntlet.GuildHall.Stealth = function() {\r\n  this.name = \"Stealth\";\r\n  this.magical = true;\r\n  this.healthBonus = this.healthBonus - 10;\r\n  this.strengthBonus = this.strengthBonus - 20;\r\n  this.intelligenceBonus = this.intelligenceBonus + 20;\r\n};\r\noriginalGauntlet.GuildHall.Stealth.prototype = new originalGauntlet.GuildHall.PlayerClass();\r\n\r\noriginalGauntlet.GuildHall.Thief = function() {\r\n  this.name = \"Thief\";\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\noriginalGauntlet.GuildHall.Thief.prototype = new originalGauntlet.GuildHall.Stealth();\r\n\r\noriginalGauntlet.GuildHall.Ninja = function() {\r\n  this.name = \"Ninja\";\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\noriginalGauntlet.GuildHall.Ninja.prototype = new originalGauntlet.GuildHall.Stealth();\r\n\r\noriginalGauntlet.GuildHall.Assassin = function() {\r\n  this.name = \"Assassin\";\r\n  this.strengthBonus = this.strengthBonus - 10;\r\n  this.intelligenceBonus = this.intelligenceBonus + 10;\r\n};\r\noriginalGauntlet.GuildHall.Assassin.prototype = new originalGauntlet.GuildHall.Stealth();\r\n\r\nreturn originalGauntlet;\r\n} (Gauntlet || {}));\r\n","Gauntlet.Combatants.Orc = function() {\r\n  this.health = this.health + 20;\r\n  this.name = \"Gobbledeegook\"\r\n  this.species = \"Orc\";\r\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Shaman\"];\r\n\r\n  this.generateClass = function() {\r\n    // Get a random index from the allowed classes array\r\n    var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n    // Get the string at the index\r\n    var randomClass = this.allowedClasses[random];\r\n\r\n    // Composes the corresponding player class into the player object\r\n    this.class = new Gauntlet.GuildHall[randomClass]();\r\n    return this.class;\r\n  }\r\n};\r\n\r\nGauntlet.Combatants.Orc.prototype = new Gauntlet.Combatants.Monster();\r\n\r\n","\r\nvar app = require('./app');\r\nvar classes = require('./classes');\r\nvar enemies = require('./enemies');\r\nvar spells = require('./spells');\r\nvar player = require('./player');\r\nvar weapons = require('./weapons');\r\n\r\n","/*\r\n  TODO: Modularize this code with IIFE or Browserify\r\n */\r\nvar Gauntlet = Gauntlet || {};\r\nGauntlet.Combatants = {};\r\n\r\n/*\r\n  Define the base object for any player of Gauntlet,\r\n  whether a human player or a monster.\r\n */\r\nGauntlet.Combatants.Player = function(name) {\r\n  this.species = null;\r\n  this.class = null;\r\n  this.weapon = null;\r\n\r\n  this.playerName = name || \"unknown adventurer\";\r\n  this.health = Math.floor(Math.random() * 40 + 50);\r\n  this.limbs = [\"head\", \"neck\", \"arm\", \"leg\", \"torso\"];\r\n  this.skinColor = \"gray\";\r\n  this.skinColors = [this.skinColor];\r\n  this.strength = 90;\r\n  this.intelligence = 90;\r\n  this.allowedWeapons = [\"Weapon\", \"Dagger\", \"BroadSword\", \"WarAxe\"];\r\n\r\n  this.toString = function() {\r\n    var output = [this.playerName,\r\n      \": a \",\r\n      this.skinColor,\r\n      \" skinned \",\r\n      this.species,\r\n      \" \",\r\n      this.class,\r\n      \" with \",\r\n      this.health,\r\n      \" health. \",\r\n      // (this.class.magical) ? \"Able to cast \" :\r\n      \" Wielding a \",\r\n      this.weapon.toString(),\r\n      \"!\"\r\n    ].join(\"\");\r\n    return output;\r\n  };\r\n};\r\n\r\nGauntlet.Combatants.Player.prototype.setWeapon = function(newWeapon) {\r\n  this.weapon = newWeapon;\r\n};\r\n\r\nGauntlet.Combatants.Player.prototype.setClass = function(newClass) {\r\n  this.class = new Gauntlet.GuildHall[newClass];\r\n};\r\n\r\n\r\n\r\nGauntlet.Combatants.Player.prototype.generateClass = function() {\r\n  // Get a random index from the allowed classes array\r\n  var random = Math.round(Math.random() * (this.allowedClasses.length - 1));\r\n\r\n  // Get the string at the index\r\n  var randomClass = this.allowedClasses[random];\r\n\r\n  // Composes the corresponding player class into the player object\r\n  this.class = new Gauntlet.GuildHall[randomClass]();\r\n\r\n  // Add the health bonus\r\n  this.health += this.class.healthBonus;\r\n  return this.class;\r\n};\r\n\r\n// This is the function that generates a random weapon for the PlayerOne\r\nGauntlet.Combatants.Player.prototype.generateWeapon = function() {\r\n  // Get a random index from the allowed classes array\r\n  var random = Math.round(Math.random() * (this.allowedWeapons.length - 1));\r\n\r\n  // Get the string at the index\r\n  var randomWeapon = this.allowedWeapons[random];\r\n\r\n  // Composes the corresponding player class into the player object\r\n  this.weapon = new Gauntlet.WeaponRack[randomWeapon]();\r\n\r\n  return this.weapon;\r\n};\r\n\r\n\r\n/*\r\n  Define the base properties for a human in a\r\n  constructor function.\r\n */\r\nGauntlet.Combatants.Human = function() {\r\n  var randomSkin;\r\n\r\n  this.species = \"Human\";\r\n  this.intelligence = this.intelligence + 20;\r\n\r\n  this.skinColors.push(\"brown\", \"red\", \"white\", \"disease\");\r\n  randomSkin = Math.round(Math.random() * (this.skinColors.length-1));\r\n  this.skinColor = this.skinColors[randomSkin];\r\n\r\n  this.allowedClasses = [\"Warrior\", \"Berserker\", \"Valkyrie\", \"Monk\", \"Wizard\", \"Shaman\", \"Conjurer\", \"Sorcerer\", \"Thief\", \"Ninja\", \"Assassin\"];\r\n};\r\nGauntlet.Combatants.Human.prototype = new Gauntlet.Combatants.Player();\r\n\r\n\r\n/*\r\n  Define the base properties for a monster in a\r\n  constructor function.\r\n */\r\nGauntlet.Combatants.Monster = function() {\r\n  this.health = this.health - 30;\r\n  this.intelligence = this.intelligence -20;\r\n  this.strength = this.strength + 30;\r\n};\r\n\r\nGauntlet.Combatants.Monster.prototype = new Gauntlet.Combatants.Player();\r\n\r\n","/*\r\n  TODO: Modularize this code with IIFE or Browserify\r\n */\r\nvar Gauntlet = Gauntlet || {};\r\nGauntlet.SpellBook = {};\r\n\r\n\r\n/*\r\n  Base spell function that defines name, damage, damage type\r\n */\r\nGauntlet.SpellBook.Spell = function() {\r\n  this.name = \"\";\r\n  this.damage = 0;\r\n\r\n  this.damageTypes = [\"lightning\", \"fire\", \"water\", \"earth\", \"mysticism\"];\r\n  this.type = \"\";\r\n\r\n  this.toString = function() {\r\n    return this.name + \" of \" + this.type + \" for \" + this.damage + \" damage!\";\r\n  }\r\n};\r\n\r\n/*\r\n  An elemental sphere that can be cast by a magical class\r\n */\r\nGauntlet.SpellBook.Sphere = function() {\r\n  this.name = \"sphere\";\r\n  this.damage = Math.floor(Math.random() * 10 + 10);\r\n\r\n  var random = Math.round(Math.random() * (this.damageTypes.length - 1));\r\n  this.type = this.damageTypes[random];\r\n};\r\nGauntlet.SpellBook.Sphere.prototype = new Gauntlet.SpellBook.Spell();\r\n","// var originalGauntlet()\r\n\r\nvar Gauntlet = (function(originalGauntlet) {\r\n\r\n// var originalGauntlet = originalGauntlet || {};\r\n// originalGauntlet.Combatants = {};\r\noriginalGauntlet.WeaponRack = {};\r\n\r\noriginalGauntlet.WeaponRack.Weapon = function () {\r\n  this.name = \"bare hands\";\r\n  this.damage = 1;\r\n  this.hands = 2;\r\n  this.toString = function() {\r\n    return this.name;\r\n  }\r\n};\r\n\r\nvar Weapon = function() {\r\n  this.name = \"bare hands\";\r\n  this.damage = 1;\r\n  this.hands = 2;\r\n\r\n  this.toString = function() {\r\n    return this.name;\r\n  }\r\n};\r\nconsole.log(originalGauntlet.WeaponRack.Weapon);\r\n\r\noriginalGauntlet.WeaponRack.Dagger =function() {\r\n  this.name = \"dagger\";\r\n  this.damage = 4;\r\n  this.hands = 1;\r\n};\r\noriginalGauntlet.WeaponRack.Dagger.prototype = new originalGauntlet.WeaponRack.Weapon();\r\nconsole.log(originalGauntlet.WeaponRack.Dagger);\r\n\r\noriginalGauntlet.WeaponRack.BroadSword = function() {\r\n  this.name = \"broad sword\";\r\n  this.damage = 14;\r\n  this.hands = 2;\r\n};\r\noriginalGauntlet.WeaponRack.BroadSword.prototype = new originalGauntlet.WeaponRack.Weapon();\r\nconsole.log(originalGauntlet.WeaponRack.BroadSword);\r\n\r\noriginalGauntlet.WeaponRack.WarAxe = function() {\r\n  this.name = \"war axe\";\r\n  this.damage = 18;\r\n  this.hands = 2;\r\n};\r\noriginalGauntlet.WeaponRack.WarAxe.prototype = new originalGauntlet.WeaponRack.Weapon();\r\nconsole.log(originalGauntlet.WeaponRack.WarAxe);\r\n\r\nreturn originalGauntlet;\r\n} (Gauntlet || {}));"]}